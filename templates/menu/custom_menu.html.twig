{% extends '@KnpMenu/menu.html.twig' %}
{% block list %}
    {% if item.hasChildren and options.depth is not same as(0) and item.displayChildren %}
        {% import _self as knp_menu %}
        <div{{ knp_menu.attributes(listAttributes) }}>
            {{ block('children') }}
        </div>
    {% endif %}
{% endblock %}



{% block linkElement %}
    {% import _self as knp_menu %}

    {% set attachedRoutes = false %}
    {% set isAttachedRoute = false %}
    {% if item.extras.attached_routes is defined %}
        {% set attachedRoutes = item.extras.attached_routes %}
        {% for routes in attachedRoutes %}
            {% if app.request.get('_route') in attachedRoutes %}
                {%- set isAttachedRoute = true %}
            {% endif %}
        {% endfor %}
    {% endif %}

    {%- set linkAttributes = item.linkAttributes %}
    {%- set linkClasses = linkAttributes.class is defined ? [linkAttributes.class] : []  %}
        {%- if matcher.isCurrent(item) or isAttachedRoute %}
            {%- set linkClasses = linkClasses|merge([options.currentClass]) %}
        {% endif %}
        {%- if linkClasses is not empty %}
            {%- set linkAttributes = linkAttributes|merge({'class': linkClasses|join(' ')}) %}
        {%- endif %}
    <a href="{{ item.uri }}"{{ knp_menu.attributes(linkAttributes) }}>{{ block('label') }}</a>
{% endblock %}


{% block item %}
    {% if item.displayed %}
        {# building the class of the item #}
        {%- set classes = item.attribute('class') is not empty ? [item.attribute('class')] : [] %}
        {%- if matcher.isCurrent(item) %}
{#            {%- set classes = classes|merge([options.currentClass]) %}#}
        {%- elseif matcher.isAncestor(item, options.matchingDepth) %}
            {%- set classes = classes|merge([options.ancestorClass]) %}
        {%- endif %}

        {# Mark item as "leaf" (no children) or as "branch" (has children that are displayed) #}
        {% if item.hasChildren and options.depth is not same as(0) %}
            {% if options.branch_class is not empty and item.displayChildren %}
                {%- set classes = classes|merge([options.branch_class]) %}
            {% endif %}
        {% elseif options.leaf_class is not empty %}
            {%- set classes = classes|merge([options.leaf_class]) %}
        {%- endif %}

        {%- set attributes = item.attributes %}
        {%- if classes is not empty %}
            {%- set attributes = attributes|merge({'class': classes|join(' ')}) %}
        {%- endif %}
        {# displaying the item #}
        {% import _self as knp_menu %}
        <div>
            {% if item.level == 1 %}
            <div{{ knp_menu.attributes(attributes) }}>
                {% endif %}
            {%- if item.uri is not empty and (not matcher.isCurrent(item) or options.currentAsLink) %}
                {{ block('linkElement') }}
            {%- else %}
                {{ block('spanElement') }}
            {%- endif %}
                {% if item.level == 1 %}
            </div>
                {% endif %}
            {# render the list of children#}
            {%- set childrenClasses = item.childrenAttribute('class') is not empty ? [item.childrenAttribute('class')] : [] %}
            {%- set childrenClasses = childrenClasses|merge(['menu_subs']) %}
            {%- set listAttributes = item.childrenAttributes|merge({'class': childrenClasses|join(' ') }) %}
            {{ block('list') }}
        </div>
    {% endif %}
{% endblock %}